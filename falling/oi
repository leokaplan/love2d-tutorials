function love.load()
    player = {}
    player.x = 100 
    player.speed = 0
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", player.x, 100, 50, 50)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -10
    elseif key == "d" then
        player.speed = 10
    end
end
function love.keyreleased(key)
    player.speed = 0
end
function love.load()
    player = {}
    player.x = 100 
    player.speed = 0
    enemy = {}
    enemy.y = 0
    enemy.speed = 10
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
    enemy.y = enemy.y + enemy.speed*dt   
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", player.x, 100, 50, 50)
    love.graphics.setColor(0,0,255,255)
    love.graphics.rectangle("fill", 100, enemy.y, 50, 50)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -10
    elseif key == "d" then
        player.speed = 10
    end
end
function love.keyreleased(key)
    player.speed = 0
end
function love.load()
    player = {}
    player.x = 100 
    player.speed = 0
    player.color = {255,0,0,255}
    enemy = {}
    enemy.y = 0
    enemy.speed = 10
    enemy.color = {0,0,0,255}
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
    enemy.y = enemy.y + enemy.speed*dt   
end
function love.draw()
    love.graphics.setColor(player.color)
    love.graphics.rectangle("fill", player.x, 100, 50, 50)
    love.graphics.setColor(enemy.color)
    love.graphics.rectangle("fill", 100, enemy.y, 50, 50)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -10
    elseif key == "d" then
        player.speed = 10
    end
end
function love.keyreleased(key)
    player.speed = 0
end
function love.load()
    WINW,WINH = love.graphics.getDimensions()
    player = {}
    player.x = 100 
    player.speed = 0
    player.color = {255,0,0,255}
    enemy = {}
    enemy.y = 0
    enemy.speed = 10
    enemy.color = {0,0,0,255}
    gravity = 10
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
    enemy.y = enemy.y + enemy.speed*dt + gravity*dt*dt/2  
end
function love.draw()
    love.graphics.setColor(player.color)
    love.graphics.rectangle("fill", player.x, WINH - 50, 50, 50)
    love.graphics.setColor(enemy.color)
    love.graphics.rectangle("fill", 100, enemy.y, 50, 50)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -10
    elseif key == "d" then
        player.speed = 10
    end
end
function love.keyreleased(key)
    player.speed = 0
end
function love.load()
    WINW,WINH = love.graphics.getDimensions()
    player = {}
    player.x = WINW/2 
    player.speed = 0
    player.acc = 20
    player.color = {255,0,0,255}
    enemy = {}
    enemy.y = 0
    enemy.speed = 10
    enemy.color = {0,0,0,255}
    gravity = 10
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
    enemy.y = enemy.y + enemy.speed*dt + gravity*dt*dt/2  
end
function love.draw()
    love.graphics.setColor(player.color)
    love.graphics.rectangle("fill", player.x, WINH - 50, 50, 50)
    love.graphics.setColor(enemy.color)
    love.graphics.rectangle("fill", 100, enemy.y, 50, 50)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -acc
    elseif key == "d" then
        player.speed = acc
    end
end
function love.keyreleased(key)
    player.speed = 0
end
function love.load()
    WINW,WINH = love.graphics.getDimensions()
    player = {}
    player.x = WINW/2 
    player.speed = 0
    player.acc = 20
    player.color = {255,0,0,255}
    player.w = 50
    player.h = 50
    enemy = {}
    enemy.x = 100
    enemy.y = 0
    enemy.speed = 10
    enemy.color = {0,0,255,255}
    enemy.w = 30
    enemy.h = 30
    gravity = 10
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
    enemy.y = enemy.y + enemy.speed*dt + gravity*dt*dt/2  
end
function love.draw()
    love.graphics.setColor(player.color)
    love.graphics.rectangle("fill", player.x, WINH - player.h, player.w, player.h)
    love.graphics.setColor(enemy.color)
    love.graphics.rectangle("fill", enemy.x, enemy.y, enemy.w, enemy.h)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -player.acc
    elseif key == "d" then
        player.speed = player.acc
    end
end
function love.keyreleased(key)
    player.speed = 0
end
function love.load()
    WINW,WINH = love.graphics.getDimensions()
    player = {}
    player.x = WINW/2 
    player.speed = 0
    player.acc = 20
    player.color = {255,0,0,255}
    player.w = 50
    player.h = 50
    enemy = {}
    enemy.x = 100
    enemy.y = 0
    enemy.speed = 10
    enemy.color = {0,0,255,255}
    enemy.w = 30
    enemy.h = 30
    gravity = 30
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
    enemy.y = enemy.y + enemy.speed*dt + gravity*dt*dt/2  
end
function love.draw()
    love.graphics.setColor(player.color)
    love.graphics.rectangle("fill", player.x, WINH - player.h, player.w, player.h)
    love.graphics.setColor(enemy.color)
    love.graphics.rectangle("fill", enemy.x, enemy.y, enemy.w, enemy.h)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -player.acc
    elseif key == "d" then
        player.speed = player.acc
    end
end
function love.keyreleased(key)
    player.speed = 0
end
--[[
    This is the most basic löve app. It just draws a square on the screen.
    The Löve game engine uses a very well known model:
        a initializer = the load function, which will be called on startup and never again.
        a step function = the update function, which will be called on every tick.
                            A tick is the smallest unit of time in the computer.
                            We'll discuss this function later on.
        a renderer = the draw function, which will draw things on the screen every frame.
                            Löve has a coordinate system based on the upper-left of the screen
                            it means that y=0 is the top line and x = 0 is the left line
                            increasing y will go down, increasing x will go right
--]]


function love.load()
       
end
function love.update(dt)

end
function love.draw()
    --love.graphics.rectangle(mode, x, y, w, h)
    --mode can be "line" or "fill"
    -- try playing with these values
    love.graphics.rectangle("fill", 100, 100, 50, 50)
end

--[[
    So here we are drawing a red square!
    How does this work?
    Have you ever used a graphical editor such as MS Paint, Adobe Photoshop or Gimp?
    In this editors, you have to choose a color to draw and then draw. 
    Of course there is a default color (love's is white, as you have seen).
    But here we set it as red.
--]]

function love.load()
       
end
function love.update(dt)

end
function love.draw()
    --love.graphics.setColor(red,green,blue,alpha)
    --every color has an amount from 0 to 255, which gives us 255*255*255 = 16581375 colors
    --alpha is the transparency value, with 255 it's full opaque, with 0 it's full transparent
    --red is obviously: red = 255, green = 0 and blue = 0
    --experiment with the colors and alpha to see how this works
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", 100, 100, 50, 50)
end
--[[
    Yes, it is the same as the last one.
    But this time we are using a variable to represent our position on the x axis.
    In the next lesson we will start to move things!
--]]
function love.load()
    -- see how a variable is declared? just choose a name and a initial value
    -- what would happen if you set this to other values? 
    -- can you make a variable for y too?
    x = 100 
end
function love.update(dt)
    
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    --here we are using our variable
    love.graphics.rectangle("fill", x, 100, 50, 50)
end
--[[
    That's right! Off we go! We are moving!
    Note the update function.
    We are increasing x by 1 for every call of update, but what does that mean?
        What we are doing here is moving the square by 1 pixel for every frame.
        It is the same as increasing x in the draw function (try it!)
    What would happen if we increase the y instead of x? and the width? 
    can you scale the square over time, keeping the square shape?
    what would happen if you had a slower/faster pc and a different framerate? 
--]]

function love.load()
      x = 100 
end
function love.update(dt)
      x = x + 1   
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", x, 100, 50, 50)
end
--[[
    Have you noticed the difference?
    We are now using the dt parameter.
    I guess you've gotten curious about it.
    If you took a physics or calculus class you are familiar with the concept of dt.
    If you haven't, I will explain it now: 
        it's the amount of time that have passed since the last update call.
    If you recall the physics class, when we work with constant speed our position formula is:
        position = initial_position + speed*delta_time
            our delta_time is dt,
            our initial_position is our last position,
            our speed is 1 pixel per millisecond. 
                note how we changed our speed from pixel/frame to pixel/time:
                it means that in every computer it will have the same speed.
        thus:
        x = x + speed*dt
        
    pop quiz:
        can we change our position on draw now?(using a pixel/time velocity)
        can you accelerate the movement?
        (tips: what does acceleration means? 
               how does it relates to the velocity and with the position?)
            
--]]
function love.load()
      x = 100 
end
function love.update(dt)
      x = x + 1*dt   
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", x, 100, 50, 50)
end
--[[
    Dang! What is it? A blue screen? An error message?
    This time we will have to read our code, fix it and just then we will be able to run it.
    (As a matter of fact, we will run the next lesson...)
    First things first, let's discuss what this program should do.
    I will talk about the new tools used then I will talk what they are aiming to do and last, but not least, I will explain why it is not working and how we fix it.
    In this lesson we will see some new stuff:
        * how to print text on the screen
        * how to receive user input from the keyboard
        * conditionals
    In the draw function we can see the print function. It's pretty straightforward: 
        you give it a text and a point to draw and it prints the text on the screen.
    Now let's see the keypressed function.
    This function is called every time the user presses a keyboard button.
        It gives us the key that was pressed and if it was repeately pressed.
    The content of the function is simple: 
        if the key pressed by the user is 'a' then we will walk to the left 
        if it is 'd' we will walk to the right
            what will happen if we don't press anything?   
            what will happen if we press 'm', for example?
            what will happen if we press 'a' and 'd' at the same time? and 'a' and 'c'?
            what would happen if we just used if instead of elseif?
            And if we just used else?
            This kind of hipotetical questions should always be popping into your head.
    If you read the error message you can guess where the problem is.
    The problem is that we can't access dt from the keypressed function.
    How do we solve it? Well, we will create a new variable, speed and change it in keypressed. 
    But we will use it to update the position just in the update function.
    Don't worry, I have already fixed for the next lesson.
    Besides that, we changed our speed to 10, since 1px/s is too slow.
--]]


function love.load()
      x = 100 
end
function love.update(dt)
      x = x + 10*dt   
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", x, 100, 50, 50)
    --love.graphics.print(text,x,y)
    --text should be quoted, so it is not interpreted as a variable
    love.graphics.print("press 'a' or 'd' to change the square orientation",0,0)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        x = x - 10*dt
    elseif key == "d" then
        x = x + 10*dt
    end
end
--[[
    Once again, everything changed.
    Now, for the first time, you were invited to affect our simulated world with your free will.
    This lesson isn't very interesting, it's just to you see it working.
    But one thing that is bothering me is that the square doesn't stop and it starts moving by itself.
    It is not a great avatar if it has some kind of free will.
    Can you change the code so that the square moves only when the user presses 'a' and 'd'?
--]]


function love.load()
      x = 100 
      speed = 10
end
function love.update(dt)
      x = x + speed*dt   
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", x, 100, 50, 50)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        speed = -10
    elseif key == "d" then
        speed = 10
    end
end
function love.load()
      x = 100 
      speed = 0
end
function love.update(dt)
      x = x + speed*dt   
end
function love.draw()
    love.graphics.setColor(255,0,0,255)
    love.graphics.rectangle("fill", x, 100, 50, 50)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        speed = -10
    elseif key == "d" then
        speed = 10
    end
end
function love.keyreleased(key)
    speed = 0
end
function love.load()
    WINW,WINH = love.graphics.getDimensions()
    player = {}
    player.x = WINW/2 
    player.speed = 0
    player.acc = 20
    player.color = {255,0,0,255}
    player.w = 50
    player.h = 50
    enemy = {}
    enemy.x = 100
    enemy.y = 0
    enemy.speed = 10
    enemy.color = {0,0,255,255}
    enemy.w = 30
    enemy.h = 30
    gravity = 30
end
function love.update(dt)
    player.x = player.x + player.speed*dt   
    enemy.y = enemy.y + enemy.speed*dt + gravity*dt*dt/2  
end
function love.draw()
    love.graphics.setColor(player.color)
    love.graphics.rectangle("fill", player.x, WINH - player.h, player.w, player.h)
    love.graphics.setColor(enemy.color)
    love.graphics.rectangle("fill", enemy.x, enemy.y, enemy.w, enemy.h)
end
function love.keypressed(key, isrepeat)
    if key == "a" then
        player.speed = -player.acc
    elseif key == "d" then
        player.speed = player.acc
    end
end
function love.keyreleased(key)
    player.speed = 0
end
